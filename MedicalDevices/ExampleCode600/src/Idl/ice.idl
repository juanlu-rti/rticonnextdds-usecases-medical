/*******************************************************************************
 (c) 2005-2014 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 RTI grants Licensee a license to use, modify, compile, and create derivative
 works of the Software.  Licensee has the right to distribute object form only
 for use with RTI products.  The Software is provided "as is", with no warranty
 of any type, including any warranty for fitness for any purpose. RTI is under
 no obligation to maintain or support the Software.  RTI shall not be liable for
 any incidental or consequential damages arising out of the use or inability to
 use the software.
 ******************************************************************************/
/*  This is a slightly modified version of the ice.idl file from the MDPnP project */

module ice {

  /* Unique ID of a device */
  typedef string<64> UniqueDeviceIdentifier;

  /* Identifier of the metric being gathered by a device */
  typedef string<64>  MetricIdentifier;
  typedef long InstanceIdentifier;
  typedef string<128> LongString;
  typedef sequence<LongString, 128> ValidTargets;
  typedef string<256> TextString;
  typedef sequence<octet, 65530> Raster;
  typedef sequence<float, 400> Values;

  struct Image {
    Raster raster;
    long width;
    long height;
  };

  /* All identifying information for a device, including UID, manufacturer,
     model, and serial number.
	 */
  struct DeviceIdentity {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    LongString manufacturer;
    LongString model;
    LongString serial_number;
    Image icon;
  };

  const string DeviceIdentityTopic = "ice_DeviceIdentity";

  /* Enumeration describing the connection state */
  enum ConnectionState {
    Connected,
    Connecting,
    Negotiating,
    Disconnecting,
    Disconnected
  };

  /* Enumeration describing the type of connection. */
  enum ConnectionType {
    Serial,
    Simulated,
    Network
  };

  /* Full connection description of device */
  struct DeviceConnectivity {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    ConnectionState state;
    ConnectionType type;
    LongString info;
    ValidTargets valid_targets;
  };


  struct DeviceConnectivityObjective {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    boolean connected;
    LongString target;
  };


  const string DeviceConnectivityTopic = "ice_DeviceConnectivity";
  const string DeviceConnectivityObjectiveTopic = "ice_DeviceConnectivityObjective";


  // SPECULATIVE
  const string MDC_PRESS_CUFF_NEXT_INFLATION = "MDC_PRESS_CUFF_NEXT_INFLATION";
  const string MDC_PRESS_CUFF_INFLATION = "MDC_PRESS_CUFF_INFLATION";

  const string MDC_HR_ECG_MODE = "MDC_HR_ECG_MODE";
  const string MDC_RR_APNEA = "MDC_RR_APNEA";
  const string MDC_SPO2_C_LOCK = "MDC_SPO2_C_LOCK";
  const string MDC_TIME_PD_INSPIRATORY = "MDC_TIME_PD_INSPIRATORY";
  const string MDC_TIME_MSEC_SINCE_EPOCH = "MDC_TIME_MSEC_SINCE_EPOCH";
  const string MDC_CAPNOGRAPH = "MDC_CAPNOGRAPH";
  const string MDC_START_OF_BREATH = "MDC_START_OF_BREATH";
  const string MDC_VENT_TIME_PD_PPV = "MDC_VENT_TIME_PD_PPV";

  const long MDC_EVT_STAT_NBP_DEFL_AND_MEAS_BP = 6250;
  const long MDC_EVT_STAT_NBP_INFL_TO_MAX_CUFF_PRESS = 6222;
  const long MDC_EVT_STAT_OFF = 6226;

  // ----------------------------------------------------------------------- //
  // Primitive data types provided by devices
  // ----------------------------------------------------------------------- //

  // Individual numeric value provided by a device
  struct Numeric {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    InstanceIdentifier instance_id; //@key
    float value;
  };

  const string NumericTopic = "ice_Numeric";

  // Array containing multiple values sampled from a device
  struct SampleArray {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    InstanceIdentifier instance_id; //@key
    Values values;
    long millisecondsPerSample;
  };

  const string SampleArrayTopic = "ice_SampleArray";

  // Text output from a device
  struct Text {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    InstanceIdentifier instance_id; //@key
    TextString value;
  };

  const string TextTopic = "ice_Text";

  // ----------------------------------------------------------------------- //
  // Objectives of specific types of devices
  // ----------------------------------------------------------------------- //
  struct InfusionObjective {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    LongString requestor;
    boolean stopInfusion;
  };

  const string InfusionObjectiveTopic = "ice_InfusionObjective";
  struct InfusionStatus {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    // is the pump actively infusing?
    boolean infusionActive;

    // it's entirely unclear if patient id, care area, BSA, etc. should be here

    // measurement units are standardized to avoid inconsistent states
    // derived values are omitted to avoid inconsistent states

    // what's in the bag
    TextString drug_name;
    long drug_mass_mcg;
    long solution_volume_ml;
    // concentration can be derived

    // what's the program
    long volume_to_be_infused_ml;
    long infusion_duration_seconds;
    // rate can be derived

    // what is the progress through the program?
    float infusion_fraction_complete;
  };

  const string InfusionStatusTopic = "ice_InfusionStatus";


  // ----------------------------------------------------------------------- //
// Assumes all instances of a given metric have the same alarm settings
// is this true?
  struct AlarmSettings {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    float lower;
    float upper;

  };

  const string AlarmSettingsTopic = "ice_AlarmSettings";

  struct GlobalAlarmSettingsObjective {
    MetricIdentifier metric_id; //@key
    float lower;
    float upper;

  };

  const string GlobalAlarmSettingsObjectiveTopic = "ice_GlobalAlarmSettingsObjective";

  struct LocalAlarmSettingsObjective {
    UniqueDeviceIdentifier unique_device_identifier; //@key
    MetricIdentifier metric_id; //@key
    float lower;
    float upper;
  };

  const string LocalAlarmSettingsObjectiveTopic = "ice_LocalAlarmSettingsObjective";

};
